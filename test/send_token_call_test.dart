// testing: ./redux/actions/cash_wallet_actions.sendTokenCall

import 'package:flutter_test/flutter_test.dart';
import 'package:vegan_liverpool/common/di/di.dart';

// import 'package:mocking/main.dart'; //* Generated by mockito once build runner has run

import 'network_services.dart';

// Generate a MockClient using the Mockito package.
// Create new instances of this class in each test.
void main() {
  // https://api.flutter.dev/flutter/flutter_test/setUp.html
  // https://stackoverflow.com/a/62665879
  ServicesModule services;
  setUp(() async {
    await configureDependencies(environment: Env.test);
  });
  group('redux.actions.sendTokenCall', () {
    test(
        'can send tokens on a local ganache instance of fuse chain and store update',
        () async {
      // Use Mockito to return a successful response when it calls the
      // provided http.Client.
      // when(client
      //         .get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1')))
      //     .thenAnswer((_) async =>
      //         http.Response('{"userId": 1, "id": 2, "title": "mock"}', 200));

      // expect(await fetchAlbum(client), isA<Album>());
    });
    test('test description with optionally async lambda as arg', () async {});
  });
}
